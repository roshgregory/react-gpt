{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roshan\\\\Documents\\\\pet\\\\react-gpt\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot(_ref) {\n  _s();\n  let {\n    apiKey,\n    model\n  } = _ref;\n  const [message, setMessage] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const configuration = new Configuration({\n    apiKey: apiKey\n  });\n  const openai = new OpenAIApi(configuration);\n  const sendMessage = async () => {\n    // Add the user's message to the conversation\n    setConversation(prevConversation => [...prevConversation, {\n      text: message,\n      sender: 'user'\n    }]);\n\n    // Send the user's message to the API\n    const completion = await openai.createChatCompletion({\n      model: model,\n      messages: [{\n        role: 'user',\n        content: message\n      }]\n    });\n\n    // Add the bot's response to the conversation\n    setConversation(prevConversation => [...prevConversation, {\n      text: completion.data.choices[0].message.content,\n      sender: 'bot'\n    }]);\n    console.log(completion.data.choices[0].message.content);\n\n    // Clear the message input\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: conversation.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [message.sender === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"You: \", message.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this), message.sender === 'bot' && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Bot: \", message.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"wXnHTkZ/OFFj7TJrDRakOekhQ98=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","Configuration","OpenAIApi","axios","jsxDEV","_jsxDEV","Chatbot","_ref","_s","apiKey","model","message","setMessage","conversation","setConversation","configuration","openai","sendMessage","prevConversation","text","sender","completion","createChatCompletion","messages","role","content","data","choices","console","log","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Roshan/Documents/pet/react-gpt/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Configuration, OpenAIApi } from 'openai';\r\nimport axios from 'axios';\r\n\r\nfunction Chatbot({ apiKey, model }) {\r\n  const [message, setMessage] = useState('');\r\n  const [conversation, setConversation] = useState([]);\r\n\r\n  const configuration = new Configuration({\r\n    apiKey: apiKey,\r\n  });\r\n  const openai = new OpenAIApi(configuration);\r\n\r\n  const sendMessage = async () => {\r\n    // Add the user's message to the conversation\r\n    setConversation(prevConversation => [\r\n      ...prevConversation,\r\n      {\r\n        text: message,\r\n        sender: 'user',\r\n      },\r\n    ]);\r\n\r\n    // Send the user's message to the API\r\n    const completion = await openai.createChatCompletion({\r\n      model: model,\r\n      messages: [{ role: 'user', content: message }],\r\n    });\r\n\r\n    // Add the bot's response to the conversation\r\n    setConversation(prevConversation => [\r\n      ...prevConversation,\r\n      {\r\n        text: completion.data.choices[0].message.content,\r\n        sender: 'bot',\r\n      },\r\n    ]);\r\n    console.log(completion.data.choices[0].message.content)\r\n\r\n    // Clear the message input\r\n    setMessage('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {conversation.map((message, index) => (\r\n          <div key={index}>\r\n            {message.sender === 'user' && (\r\n              <div>\r\n                You: {message.text}\r\n              </div>\r\n            )}\r\n            {message.sender === 'bot' && (\r\n               \r\n              <div>\r\n              \r\n                Bot: {message.text}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input type=\"text\" value={message} onChange={e => setMessage(e.target.value)} />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}