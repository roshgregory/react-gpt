{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roshan\\\\Documents\\\\pet\\\\react-gpt\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport axios from 'axios';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot(_ref) {\n  _s();\n  let {\n    apiKey,\n    model\n  } = _ref;\n  const [message, setMessage] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(models[0]);\n  const configuration = new Configuration({\n    apiKey: apiKey\n  });\n  const openai = new OpenAIApi(configuration);\n  const sendMessage = async () => {\n    // Add the user's message to the conversation\n    setConversation(prevConversation => [...prevConversation, {\n      text: message,\n      sender: 'user'\n    }]);\n\n    // Send the user's message to the API\n    const completion = await openai.createChatCompletion({\n      model: model,\n      messages: [{\n        role: 'user',\n        content: message\n      }]\n    });\n\n    // Add the bot's response to the conversation\n    setConversation(prevConversation => [...prevConversation, {\n      text: completion.data.choices[0].message.content,\n      sender: 'bot'\n    }]);\n    console.log(completion.data.choices[0].message.content);\n\n    // Clear the message input\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation\",\n      children: conversation.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [message.sender === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-message\",\n          children: [\"You: \", message.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this), message.sender === 'bot' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-message\",\n          children: [\"Bot: \", message.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-message-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter') {\n            sendMessage();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"BqABMClWqafUvoqqbBV8kjolLBQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","Configuration","OpenAIApi","axios","jsxDEV","_jsxDEV","Chatbot","_ref","_s","apiKey","model","message","setMessage","conversation","setConversation","selectedModel","setSelectedModel","models","configuration","openai","sendMessage","prevConversation","text","sender","completion","createChatCompletion","messages","role","content","data","choices","console","log","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Roshan/Documents/pet/react-gpt/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Configuration, OpenAIApi } from 'openai';\r\nimport axios from 'axios';\r\nimport './Chatbot.css';\r\n\r\n\r\nfunction Chatbot({ apiKey, model }) {\r\n  const [message, setMessage] = useState('');\r\n  const [conversation, setConversation] = useState([]);\r\n  const [selectedModel, setSelectedModel] = useState(models[0]);\r\n\r\n  const configuration = new Configuration({\r\n    apiKey: apiKey,\r\n  });\r\n  const openai = new OpenAIApi(configuration);\r\n\r\n  const sendMessage = async () => {\r\n    // Add the user's message to the conversation\r\n    setConversation(prevConversation => [\r\n      ...prevConversation,\r\n      {\r\n        text: message,\r\n        sender: 'user',\r\n      },\r\n    ]);\r\n\r\n    // Send the user's message to the API\r\n    const completion = await openai.createChatCompletion({\r\n      model: model,\r\n      messages: [{ role: 'user', content: message }],\r\n    });\r\n\r\n    // Add the bot's response to the conversation\r\n    setConversation(prevConversation => [\r\n      ...prevConversation,\r\n      {\r\n        text: completion.data.choices[0].message.content,\r\n        sender: 'bot',\r\n      },\r\n    ]);\r\n    console.log(completion.data.choices[0].message.content)\r\n\r\n    // Clear the message input\r\n    setMessage('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"conversation\">\r\n        {conversation.map((message, index) => (\r\n          <div key={index}>\r\n            {message.sender === 'user' && (\r\n              <div className=\"user-message\">\r\n                You: {message.text}\r\n              </div>\r\n            )}\r\n            {message.sender === 'bot' && (\r\n              <div className=\"bot-message\">\r\n                Bot: {message.text}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-message-box\">\r\n      <input type=\"text\" value={message} onChange={e => setMessage(e.target.value)} onKeyDown={e => {\r\n  if (e.key === 'Enter') {\r\n    sendMessage();\r\n  }}} />\r\n  <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n            }  \r\n\r\nexport default Chatbot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}