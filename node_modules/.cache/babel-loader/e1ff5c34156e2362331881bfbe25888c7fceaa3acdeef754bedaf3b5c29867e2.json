{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roshan\\\\Documents\\\\pet\\\\react-gpt\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport axios from 'axios';\n// import './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot(_ref) {\n  _s();\n  let {\n    apiKey,\n    models,\n    className\n  } = _ref;\n  const [message, setMessage] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const [model, setModel] = useState(models);\n\n  // Initialize the OpenAI API object with the default model\n  const [openai, setOpenai] = useState(null);\n  useEffect(() => {\n    const configuration = new Configuration({\n      apiKey: apiKey\n    });\n    const initialModel = models[0].value;\n    const initialOpenai = new OpenAIApi(configuration);\n    setOpenai(initialOpenai);\n    setModel(initialModel);\n  }, [apiKey, models]);\n  const handleModelChange = event => {\n    const selectedModel = event.target.value;\n    const selectedModelConfig = models.find(model => model.value === selectedModel);\n    const configuration = new Configuration({\n      apiKey: apiKey,\n      modelId: selectedModelConfig.id\n    });\n    const selectedOpenai = new OpenAIApi(configuration);\n    setOpenai(selectedOpenai);\n    setModel(selectedModel);\n    setConversation([]);\n  };\n  const sendMessage = async () => {\n    // Add the user's message to the conversation\n    setConversation(prevConversation => [...prevConversation, {\n      text: message,\n      sender: 'user'\n    }]);\n\n    // Send the user's message to the API\n    const completion = await openai.createChatCompletion({\n      prompt: message,\n      maxTokens: 60,\n      temperature: 0.7,\n      n: 1,\n      stop: \"\\n\"\n    });\n\n    // Add the bot's response to the conversation\n    setConversation(prevConversation => [...prevConversation, {\n      text: completion.data.choices[0].text,\n      sender: 'bot'\n    }]);\n\n    // Clear the message input\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: model,\n        onChange: handleModelChange,\n        children: models.map(model => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: model.value,\n          children: model.label\n        }, model.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation\",\n      children: conversation.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [message.sender === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-message\",\n          children: [\"You: \", message.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 43\n        }, this), message.sender === 'bot' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-message\",\n          children: [\"Bot: \", message.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 42\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-message-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            sendMessage();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"CiaIbdBNoHBRfYtuaFJmGF53Hbk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","Configuration","OpenAIApi","axios","jsxDEV","_jsxDEV","Chatbot","_ref","_s","apiKey","models","className","message","setMessage","conversation","setConversation","model","setModel","openai","setOpenai","configuration","initialModel","value","initialOpenai","handleModelChange","event","selectedModel","target","selectedModelConfig","find","modelId","id","selectedOpenai","sendMessage","prevConversation","text","sender","completion","createChatCompletion","prompt","maxTokens","temperature","n","stop","data","choices","children","onChange","map","label","fileName","_jsxFileName","lineNumber","columnNumber","index","type","e","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Roshan/Documents/pet/react-gpt/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Configuration, OpenAIApi } from 'openai';\r\nimport axios from 'axios';\r\n// import './Chatbot.css';\r\n\r\nfunction Chatbot({ apiKey, models, className }) {\r\n  const [message, setMessage] = useState('');\r\n  const [conversation, setConversation] = useState([]);\r\n  const [model, setModel] = useState(models);\r\n\r\n  // Initialize the OpenAI API object with the default model\r\n  const [openai, setOpenai] = useState(null);\r\n  useEffect(() => {\r\n    const configuration = new Configuration({\r\n      apiKey: apiKey,\r\n    });\r\n    const initialModel = models[0].value;\r\n    const initialOpenai = new OpenAIApi(configuration);\r\n    setOpenai(initialOpenai);\r\n    setModel(initialModel);\r\n  }, [apiKey, models]);\r\n\r\n  const handleModelChange = (event) => {\r\n    const selectedModel = event.target.value;\r\n    const selectedModelConfig = models.find((model) => model.value === selectedModel);\r\n    const configuration = new Configuration({\r\n      apiKey: apiKey,\r\n      modelId: selectedModelConfig.id,\r\n    });\r\n    const selectedOpenai = new OpenAIApi(configuration);\r\n    setOpenai(selectedOpenai);\r\n    setModel(selectedModel);\r\n    setConversation([]);\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    // Add the user's message to the conversation\r\n    setConversation((prevConversation) => [\r\n      ...prevConversation,\r\n      {\r\n        text: message,\r\n        sender: 'user',\r\n      },\r\n    ]);\r\n\r\n    // Send the user's message to the API\r\n    const completion = await openai.createChatCompletion({\r\n      prompt: message,\r\n      maxTokens: 60,\r\n      temperature: 0.7,\r\n      n: 1,\r\n      stop: \"\\n\",\r\n    });\r\n\r\n    // Add the bot's response to the conversation\r\n    setConversation((prevConversation) => [\r\n      ...prevConversation,\r\n      {\r\n        text: completion.data.choices[0].text,\r\n        sender: 'bot',\r\n      },\r\n    ]);\r\n\r\n    // Clear the message input\r\n    setMessage('');\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div>\r\n        <select value={model} onChange={handleModelChange}>\r\n          {models.map((model) => (\r\n            <option key={model.value} value={model.value}>\r\n              {model.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"conversation\">\r\n        {conversation.map((message, index) => (\r\n          <div key={index}>\r\n            {message.sender === 'user' && <div className=\"user-message\">You: {message.text}</div>}\r\n            {message.sender === 'bot' && <div className=\"bot-message\">Bot: {message.text}</div>}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-message-box\">\r\n        <input\r\n          type=\"text\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          onKeyPress={(e) => {\r\n            if (e.key === 'Enter') {\r\n              sendMessage();\r\n            }\r\n          }}\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}